name: Next.js CI/CD

on:
  push:
    branches: [ "main" ]

  workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: self-hosted
    outputs:
      build_start_time: ${{ steps.record_build_start_time.outputs.build_start_time }}

    steps:
      - name: –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∫–∏
        id: record_build_start_time
        run: echo "build_start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Checkout —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v4

      - name: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        run: |
          echo "GITHUB_COMMIT_MESSAGE=${{ github.event.head_commit.message }}" >> $GITHUB_ENV
          echo "GITHUB_ACTOR=${{ github.actor }}" >> $GITHUB_ENV
          echo "–ö–æ–º–º–∏—Ç: ${{ github.event.head_commit.message }}"
          echo "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${{ github.actor }}"

      - name: –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ Telegram ‚Äî —Å—Ç–∞—Ä—Ç —Å–±–æ—Ä–∫–∏
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ vars.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ vars.TELEGRAM_CHAT_ID }}" \
            -d "parse_mode=Markdown" \
            --data-urlencode "text=\`\`\`
          üöÄ –°–±–æ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å
          üë§: $GITHUB_ACTOR
          üíª: ${{ vars.PROJECT_NAME }}
          Commit: $GITHUB_COMMIT_MESSAGE
          \`\`\`"

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager" >&2
            exit 1
          fi

      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock', '**/package-lock.json') }}

      - name: –í–∫–ª—é—á–µ–Ω–∏–µ Yarn —á–µ—Ä–µ–∑ Corepack
        run: corepack enable yarn

      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          if [ "${{ steps.detect-package-manager.outputs.manager }}" == "yarn" ]; then
            yarn install --frozen-lockfile
          else
            npm ci
          fi

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v4

      - name: –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ GitHub Variables
        run: |
          touch .env.production
          echo "AUTH_SECRET=${{ vars.AUTH_SECRET }}" >> .env.production
          echo "AUTH_URL=${{ vars.AUTH_URL }}" >> .env.production
          echo "NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}" >> .env.production
          echo "API_URL=${{ vars.API_URL }}" >> .env.production
          echo "NODE_ENV=${{ vars.NODE_ENV }}" >> .env.production
          echo "NEXT_TELEMETRY_DISABLED=1" >> .env.production
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ Docker (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
        run: |
          docker network inspect js_network >/dev/null 2>&1 || docker network create js_network

      - name: –°–±–æ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ Docker-–æ–±—Ä–∞–∑–∞
        run: docker compose -f docker/production/compose.yaml build

      - name: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        run: |
          if docker ps -q --filter "name=treatment_frontend" | grep -q .; then
            echo "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
            docker stop treatment_frontend || true
            docker rm treatment_frontend || true
          else
            echo "–°—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
          fi

      - name: –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        run: docker compose -f docker/production/compose.yaml up -d

      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        run: curl --max-time 30 -f http://127.0.0.1:3000 || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"

      - name: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∫–∏ –∏ –¥–µ–ø–ª–æ—è
        if: always()
        id: compute_time
        run: |
          END_TIME=$(date +%s)
          START_TIME=${{ needs.build.outputs.build_start_time }}
          DURATION=$(( END_TIME - START_TIME ))
          echo "build_time=$DURATION" >> $GITHUB_OUTPUT

      - name: –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ Telegram ‚Äî —É—Å–ø–µ—à–Ω—ã–π –¥–µ–ø–ª–æ–π
        if: success()
        run: |
          build_time=${{ steps.compute_time.outputs.build_time }}
          curl -s -X POST "https://api.telegram.org/bot${{ vars.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ vars.TELEGRAM_CHAT_ID }}" \
            -d "parse_mode=Markdown" \
            --data-urlencode "text=\`\`\`
          ‚úÖ: –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω 
          üíª: ${{ vars.PROJECT_NAME }}
          ‚è±Ô∏è: –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏+–¥–µ–ø–ª–æ—è: ${build_time} c
          üí™: –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, $GITHUB_ACTOR! üòé
          \`\`\`"

      - name: –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ Telegram ‚Äî –æ—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è
        if: failure()
        run: |
          build_time=${{ steps.compute_time.outputs.build_time }}
          curl -s -X POST "https://api.telegram.org/bot${{ vars.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ vars.TELEGRAM_CHAT_ID }}" \
            -d "parse_mode=Markdown" \
            --data-urlencode "text=\`\`\`
          ‚ùå: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
          üíª: ${{ vars.PROJECT_NAME }}
          ‚è±Ô∏è: –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏+–¥–µ–ø–ª–æ—è: ${build_time} c
          ‚ùóÔ∏è: $GITHUB_ACTOR, –ü–µ—Ä–µ–¥–µ–ª–∞–π —Å–≤–æ–π –≥–æ–≤–Ω–æ–∫–æ–¥ üí©
          \`\`\`"

  cleanup:
    runs-on: self-hosted
    if: always()
    needs: [ build, deploy ]
    steps:
      - name: –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã Docker
        run: |
          docker image prune -af
          docker container prune -f
          docker network prune -f
#          docker builder prune -af
